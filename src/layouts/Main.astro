---
import '../styles/global.css'
import Footer from '../components/Footer.astro'
import NavigationBar from '../components/NavigationBar.astro'



type Props = {
  title: string
}

const {title} = Astro.props;
---

<html lang="en">
	<head>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap"
			rel="stylesheet"
		/>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		{/* Add a new meta description tag */}
		<meta name="description" content="Frau Katarina's website" />
		{/* Title is hardcoded as Astro, for now. */}
		<title>{title}</title>

		<script>
			const DARK_THEME_CLASS = 'dark'

			const COLOUR_MODE = 'COLOUR_MODE'
			/** Represent the local storage values by variables */
			const LIGHT_THEME = 'LIGHT'
			const DARK_THEME = 'DARK'

			const toggle = document.querySelector('button')
			const rootEl = document.documentElement

			if (toggle) {
				toggle.addEventListener('click', () => {
					rootEl.classList.toggle(DARK_THEME_CLASS)

					const colourMode = rootEl.classList.contains(DARK_THEME_CLASS)
						? DARK_THEME
						: LIGHT_THEME

					/** Save the current theme to local storage */
					window.localStorage.setItem(COLOUR_MODE, colourMode)
				})

				const getInitialColourMode = () => {
					/** Get colour mode from local storage **/
					const previouslySavedColourMode =
						window.localStorage.getItem(COLOUR_MODE)
					if (previouslySavedColourMode) {
						return previouslySavedColourMode
					}
					/** Does the user prefer dark mode, e.g., through an operating system or user agent setting? */
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						return DARK_THEME
					}
					/** Default to the light theme */
					return LIGHT_THEME
				}
				/**Get initial colour mode */
				const initialColourMode = getInitialColourMode()
				const setInitialColourMode = (mode: string) => {
					if (mode === LIGHT_THEME) {
						rootEl.classList.remove(DARK_THEME_CLASS)
					} else {
						rootEl.classList.add(DARK_THEME_CLASS)
					}
				}
				/** Set the initial colour mode as soon as the script is executed */
				setInitialColourMode(initialColourMode)
			}
		</script>
	</head>
	<body>
		<main>
			<NavigationBar />
			<slot />
			<Footer />
		</main>
	</body>
</html>
